{"ast":null,"code":"import _defineProperty from \"/home/user/Desktop/jx/react/my-cart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/user/Desktop/jx/react/my-cart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/user/Desktop/jx/react/my-cart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/user/Desktop/jx/react/my-cart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/skeleton.tsx\nimport { usePrevious } from \"@chakra-ui/react-use-previous\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  return classNames.filter(Boolean).join(\" \");\n};\n\n// src/skeleton.tsx\nimport { chakra, cssVar, forwardRef, keyframes, omitThemingProps, useStyleConfig, useToken } from \"@chakra-ui/system\";\n\n// src/use-is-first-render.ts\nimport { useEffect, useRef } from \"react\";\nfunction useIsFirstRender() {\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n}\n\n// src/skeleton.tsx\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = cssVar(\"skeleton-start-color\");\nvar $endColor = cssVar(\"skeleton-end-color\");\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar Skeleton = forwardRef(function (props, ref) {\n  var skeletonProps = _objectSpread({\n    fadeDuration: 0.4,\n    speed: 0.8\n  }, props);\n  var styles = useStyleConfig(\"Skeleton\", skeletonProps);\n  var isFirstRender = useIsFirstRender();\n  var _omitThemingProps = omitThemingProps(skeletonProps),\n    _omitThemingProps$sta = _omitThemingProps.startColor,\n    startColor = _omitThemingProps$sta === void 0 ? \"\" : _omitThemingProps$sta,\n    _omitThemingProps$end = _omitThemingProps.endColor,\n    endColor = _omitThemingProps$end === void 0 ? \"\" : _omitThemingProps$end,\n    isLoaded = _omitThemingProps.isLoaded,\n    fadeDuration = _omitThemingProps.fadeDuration,\n    speed = _omitThemingProps.speed,\n    className = _omitThemingProps.className,\n    fitContent = _omitThemingProps.fitContent,\n    rest = _objectWithoutProperties(_omitThemingProps, [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\", \"fitContent\"]);\n  var _useToken = useToken(\"colors\", [startColor, endColor]),\n    _useToken2 = _slicedToArray(_useToken, 2),\n    startColorVar = _useToken2[0],\n    endColorVar = _useToken2[1];\n  var wasPreviouslyLoaded = usePrevious(isLoaded);\n  var _className = cx(\"chakra-skeleton\", className);\n  var cssVarStyles = _objectSpread({}, startColorVar && _defineProperty({}, $startColor.variable, startColorVar), endColorVar && _defineProperty({}, $endColor.variable, endColorVar));\n  if (isLoaded) {\n    var animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : \"\".concat(fade, \" \").concat(fadeDuration, \"s\");\n    return /* @__PURE__ */React.createElement(chakra.div, _objectSpread({\n      ref: ref,\n      className: _className,\n      __css: {\n        animation: animation\n      }\n    }, rest));\n  }\n  return /* @__PURE__ */React.createElement(StyledSkeleton, _objectSpread({\n    ref: ref,\n    className: _className\n  }, rest, {\n    __css: _objectSpread({\n      width: fitContent ? \"fit-content\" : void 0\n    }, styles, cssVarStyles, {\n      _dark: _objectSpread({}, styles[\"_dark\"], cssVarStyles),\n      animation: \"\".concat(speed, \"s linear infinite alternate \").concat(bgFade)\n    })\n  }));\n});\nSkeleton.displayName = \"Skeleton\";\n\n// src/skeleton-text.tsx\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nfunction range(count) {\n  return Array(count).fill(1).map(function (_, index) {\n    return index + 1;\n  });\n}\nvar defaultNoOfLines = 3;\nvar SkeletonText = function SkeletonText(props) {\n  var _props$noOfLines = props.noOfLines,\n    noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines,\n    _props$spacing = props.spacing,\n    spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n    _props$skeletonHeight = props.skeletonHeight,\n    skeletonHeight = _props$skeletonHeight === void 0 ? \"0.5rem\" : _props$skeletonHeight,\n    className = props.className,\n    startColor = props.startColor,\n    endColor = props.endColor,\n    isLoaded = props.isLoaded,\n    fadeDuration = props.fadeDuration,\n    speed = props.speed,\n    children = props.children,\n    rest = _objectWithoutProperties(props, [\"noOfLines\", \"spacing\", \"skeletonHeight\", \"className\", \"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"children\"]);\n  var noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  var numbers = range(noOfLinesValue);\n  var getWidth = function getWidth(index) {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n    return \"100%\";\n  };\n  var _className = cx(\"chakra-skeleton__group\", className);\n  return /* @__PURE__ */React.createElement(chakra2.div, _objectSpread({\n    className: _className\n  }, rest), numbers.map(function (number, index) {\n    if (isLoaded && index > 0) {\n      return null;\n    }\n    var sizeProps = isLoaded ? null : {\n      mb: number === numbers.length ? \"0\" : spacing,\n      width: getWidth(number),\n      height: skeletonHeight\n    };\n    return /* @__PURE__ */React.createElement(Skeleton, _objectSpread({\n      key: numbers.length.toString() + number,\n      startColor: startColor,\n      endColor: endColor,\n      isLoaded: isLoaded,\n      fadeDuration: fadeDuration,\n      speed: speed\n    }, sizeProps), index === 0 ? children : void 0);\n  }));\n};\nSkeletonText.displayName = \"SkeletonText\";\n\n// src/skeleton-circle.tsx\nvar SkeletonCircle = function SkeletonCircle(_ref3) {\n  var _ref3$size = _ref3.size,\n    size = _ref3$size === void 0 ? \"2rem\" : _ref3$size,\n    rest = _objectWithoutProperties(_ref3, [\"size\"]);\n  return /* @__PURE__ */React.createElement(Skeleton, _objectSpread({\n    borderRadius: \"full\",\n    boxSize: size\n  }, rest));\n};\nSkeletonCircle.displayName = \"SkeletonCircle\";\nexport { Skeleton, SkeletonCircle, SkeletonText };","map":null,"metadata":{},"sourceType":"module"}